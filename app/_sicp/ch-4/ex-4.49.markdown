---
chapterName: "Metalinguistic Abstraction"
chapter: 4
solution: "4.49"
order: "049"
date: 2018-03-26 
---

The main thing to notice is we need to have some *dummy* input. Else, we get stuck in a loop where sentence are generated by just appending a same preposition clause!

The *dummy* input can be used to make sure that our sentence won't get past this dummy input length and thus when that length reaches, `amb` tries for other words and thus we get different sentences.

Here goes the code:

{% highlight scheme linenos %}
(define (list-amb l)
  (require (not (null? l)))
  (amb (car l) (list-amb (cdr l))))
  
(define (parse-word word-list)
  (require (not (null? *unparsed*)))
  (let ((found-word (list-amb (cdr word-list))))
    (set! *unparsed* (cdr *unparsed*))
    (list (car word-list) found-word)))
{% endhighlight %}

Output:

3 length input:

{% highlight scheme linenos %}
;;; Amb-Eval input:
(parse '(dummy dummy dummy))

;;; Starting a new problem 

;;; Amb-Eval value:
ok

;;; Amb-Eval input:

;;; Starting a new problem 

;;; Amb-Eval value:
(sentence (simple-noun-phrase (article the) (noun student)) (verb studies))

;;; Amb-Eval input:
try-again

;;; Amb-Eval value:
(sentence (simple-noun-phrase (article the) (noun student)) (verb lectures))

;;; Amb-Eval input:
try-again

;;; Amb-Eval value:
(sentence (simple-noun-phrase (article the) (noun student)) (verb eats))

;;; Amb-Eval input:
try-again

;;; Amb-Eval value:
(sentence (simple-noun-phrase (article the) (noun student)) (verb sleeps))

;;; Amb-Eval input:
try-again

;;; Amb-Eval value:
(sentence (simple-noun-phrase (article the) (noun professor)) (verb studies))

;;; Amb-Eval input:
{% endhighlight %}

6 length input:

{% highlight scheme linenos %}
(parse '(dummy dummy dummy dummy dummmy dummy))

;;; Starting a new problem 

;;; Amb-Eval value:
(sentence (simple-noun-phrase (article the) (noun student)) (verb-phrase (verb studies) (prep-phrase (prep for) (simple-noun-phrase (article the) (noun student)))))

;;; Amb-Eval input:
try-again

;;; Amb-Eval value:
(sentence (simple-noun-phrase (article the) (noun student)) (verb-phrase (verb studies) (prep-phrase (prep for) (simple-noun-phrase (article the) (noun professor)))))

;;; Amb-Eval input:
try-again

;;; Amb-Eval value:
(sentence (simple-noun-phrase (article the) (noun student)) (verb-phrase (verb studies) (prep-phrase (prep for) (simple-noun-phrase (article the) (noun cat)))))
{% endhighlight %}
